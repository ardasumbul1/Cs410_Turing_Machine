import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;



public class Mehmet_Arda_Sumbul_S014593 {
    
    public ArrayList<String> input_alphabet = new ArrayList<String>();
    public ArrayList<String> tape_alphabet = new ArrayList<String>();
    public String blank_string;
    public ArrayList<String> states = new ArrayList<String>();
    public String start_state;
    public String accept_state;
    public String reject_state;
    public ArrayList<String> transitions = new ArrayList<String>();
    public String string_to_pass;
    private String file_name;
    private String tape;

    public Mehmet_Arda_Sumbul_S014593(String name){
        file_name = name;
    }


    public String read_text_file(){
        String empty_string = "";
            try{
                FileInputStream input_file = new FileInputStream(file_name);

                Scanner in = new Scanner(input_file);

                while(in.hasNext()){
                    String text = in.nextLine();
                    empty_string += text + ";";
                }
                in.close();
            } catch(FileNotFoundException e){
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
            return empty_string;
        }
        public void read_and_construct() {

            String string_to_parse = read_text_file();
            String[] elements = string_to_parse.split(";");
            int tape_alphabet_index = 0;
            int blank_string_index = 0;
            int states_index = 0;
            int start_state_index = 0;
            int accept_state_index = 0;
            int reject_state_index = 0;
            int transitions_index = 0;
            int string_to_pass_index = 0;
    
            for (int i = 0; i<elements.length; i++){
                if(elements[i].equals("TAPE ALPHABET")){
                    tape_alphabet_index = i;
                }
                if(elements[i].equals("BLANK SYMBOL")){
                    blank_string_index = i;
                }
                if(elements[i].equals("STATES")){
                    states_index = i;
                }
                if(elements[i].equals("START STATE")){
                    start_state_index = i;
                }
                if(elements[i].equals("ACCEPT STATE")){
                    accept_state_index = i;
                }
                if(elements[i].equals("REJECT STATE")){
                    reject_state_index = i;
                }
                if(elements[i].equals("TRANSITIONS")){
                    transitions_index = i;
                }
                if(elements[i].equals("STRING")){
                    string_to_pass_index = i;
                }
            }
    
            for(int i=1; i<tape_alphabet_index; i++){
                this.input_alphabet.add(elements[i]);
            }
            for(int i=tape_alphabet_index+1; i<blank_string_index; i++){
                this.tape_alphabet.add(elements[i]);
            }
            for(int i= blank_string_index+1; i< states_index; i++){
                this.blank_string = elements[i];
            }
            for(int i= states_index+1; i< start_state_index; i++){
                this.states.add(elements[i]);
            }
            for(int i= start_state_index+1; i< accept_state_index; i++){
                this.start_state = elements[i];
            }
            for(int i= accept_state_index+1; i< reject_state_index; i++){
                this.accept_state = elements[i];
            }
            for(int i= reject_state_index+1; i< transitions_index; i++){
                this.reject_state = elements[i];
            }
            for(int i= transitions_index+1; i< string_to_pass_index; i++){
                this.transitions.add(elements[i]);
            }
            for(int i= string_to_pass_index+1; i< elements.length; i++){
                this.string_to_pass = elements[i];
            }
        }
    
    public String find_next_state(ArrayList<String> list, String str ){
        String next_state = "";
        String temp = find_transition(list, str);
        next_state = temp.substring(temp.length()-2);
        return next_state;
        
        }
        
    public String find_direction(String transition){
        if(transition.contains("R")){
            return "R";
        }
        else if(transition.contains("L")){
            return "L";
        }
        else{
            System.out.println("THERE IS A PROBLEM WITH TRANSITIONS");
            return "0";
        }
    }

    // Finds the transition that generated by current state and current symbol
    public String find_transition(ArrayList<String> list, String str){
        for(int i = 0 ; i<list.size(); i++){
            if(list.get(i).substring(0,4).contains(str)){
                return list.get(i);
            }
        }
        return "Not found";
    }

    public void header_move(){
        tape = string_to_pass; 
        String current_state = start_state;
        ArrayList<String> rout = new ArrayList<String>();
        rout.add(current_state);
        for(int i = 0; i<tape.length(); i++){
            String current_symbol = Character.toString(tape.charAt(i));
            String current_transition = find_transition(transitions, current_state + " " +current_symbol );
            current_state = find_next_state(transitions, current_state + " " +current_symbol);
            tape = tape.substring(0,i) + current_transition.charAt(5) + tape.substring(i+1);
            rout.add(current_state);
            if(current_state.contains(accept_state)){
                System.out.println("ROUT:"+rout);
                System.out.println("Result: Accepted" );
                break;
            }
            if(current_state.contains(reject_state)){
                System.out.println("ROUT:"+rout);
                System.out.println("Result: Rejected" );
                break;
            }
            if(find_direction(current_transition).contains("L")){
                if(i>0){
                    i -=2;
                }
                else{
                    i = -1;
                }
            }
            if(i == tape.length()-1 & i<1000){
                string_to_pass = string_to_pass + "b";
                tape = tape + "b";
            }
            else if(i == tape.length()-1 & i>=1000){
                System.out.println("Machine is in a loop");
            }
        }
    }




        public static void main(String[] args){
            Mehmet_Arda_Sumbul_S014593 obj = new Mehmet_Arda_Sumbul_S014593("Input_Mehmet_Arda_Sumbul_S014593.txt");
            obj.read_text_file();
            obj.read_and_construct();
            obj.header_move();
        }
        
}
